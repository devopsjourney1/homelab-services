version: '3'
services:
  traefik:
    image: traefik:v2.9
    hostname: traefik
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.services.traefik.loadbalancer.server.port: "8080"
      traefik.http.routers.traefik-http.entrypoints: "web"
      traefik.http.routers.traefik-http.rule: "Host(`traefik.devopsbrad.com`)"
      traefik.http.routers.traefik-https.entrypoints: "websecure"
      traefik.http.routers.traefik-https.rule: "Host(`traefik.devopsbrad.com`)"
      traefik.http.routers.traefik-https.tls: "true"
      traefik.http.routers.traefik-https.tls.certresolver: "letsEncrypt-production"
    environment:
      - CLOUDFLARE_DNS_API_TOKEN=$CLOUDFLARE_DNS_API_TOKEN
    ports:
      # Traffic Ports
      - "$TRAEFIK_IP:80:80"
      - "$TRAEFIK_IP:443:443"
      - "$TRAEFIK_IP:8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.yaml:/traefik.yaml:ro
      - ./traefik/certs/:/etc/traefik/certs
      - ./traefik/conf/:/etc/traefik/conf
      - ./traefik/logs/:/traefik/logs/
    networks:
      services:
      home:
        ipv4_address: $TRAEFIK_IP
    deploy:
      resources:
        limits:
          memory: 64M
  # Portainer Docker Management
  portainer:
    image: portainer/portainer
    hostname: portainer
    restart: unless-stopped
    environment:
      - SESSION_TIMEOUT=315360000
    labels:
      traefik.enable: "true"
      traefik.docker.network: "traefik"
      traefik.http.services.portainer.loadbalancer.server.port: "9000"
      traefik.http.routers.portainer-http.entrypoints: "web"
      traefik.http.routers.portainer-http.rule: "Host(`portainer.devopsbrad.com`)"
      traefik.http.routers.portainer-https.entrypoints: "websecure"
      traefik.http.routers.portainer-https.rule: "Host(`portainer.devopsbrad.com`)"
      traefik.http.routers.portainer-https.tls: "true"
      traefik.http.routers.portainer-https.tls.certresolver: "letsEncrypt-production"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    networks:
      - services
    deploy:
      resources:
        limits:
          memory: 64M
  # PiHole DNS Server
  pihole:
    image: pihole/pihole:latest
    hostname: pihole
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.services.pihole.loadbalancer.server.port: "80"
      traefik.http.routers.pihole-http.entrypoints: "web"
      traefik.http.routers.pihole-http.rule: "Host(`pihole.devopsbrad.com`)"
      traefik.http.routers.pihole-https.entrypoints: "websecure"
      traefik.http.routers.pihole-https.rule: "Host(`pihole.devopsbrad.com`)"
      traefik.http.routers.pihole-https.tls: "true"
      traefik.http.routers.pihole-https.tls.certresolver: "letsEncrypt-production"
    environment:
      - "FTLCONF_REPLY_ADDR4=$PIHOLE_IP"
      - "TZ=America/New_York"
      - "WEBPASSWORD=$PIHOLE_PASSWORD"
    ports:
      - "$PIHOLE_IP:53:53/tcp"
      - "$PIHOLE_IP:53:53/udp"
      - "$PIHOLE_IP:80:80"
      - "$PIHOLE_IP:67:67"
    volumes:
      - './hostnames.dns:/etc/pihole/custom.list'
      - 'pihole-config:/etc/pihole'
      - 'pihole-dns:/etc/dnsmasq.d'
    networks:
      services:
      home:
        ipv4_address: $PIHOLE_IP
    deploy:
      resources:
        limits:
          memory: 512M
  #Database for Passbolt Password Manager
  db:
    image: mariadb:10.3
    restart: unless-stopped
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: "true"
      MYSQL_DATABASE: "$PASSBOLT_DB_NAME"
      MYSQL_USER: "$PASSBOLT_DB_USERNAME"
      MYSQL_PASSWORD: "$PASSBOLT_DB_PASSWORD"
    volumes:
      - passbolt_database_volume:/var/lib/mysql
    networks:
      - services
    deploy:
      resources:
        limits:
          memory: 512M
  #Passbolt Password Manager
  passbolt:
    image: passbolt/passbolt:latest-ce
    hostname: passbolt
    restart: unless-stopped
    depends_on:
      - db
    labels:
      traefik.enable: "true"
      traefik.http.services.passbolt.loadbalancer.server.port: "80"
      traefik.http.routers.passbolt-http.entrypoints: "web"
      traefik.http.routers.passbolt-http.rule: "Host(`pass.devopsbrad.com`)"
      traefik.http.routers.passbolt-https.entrypoints: "websecure"
      traefik.http.routers.passbolt-https.rule: "Host(`pass.devopsbrad.com`)"
      traefik.http.routers.passbolt-https.tls: "true"
      traefik.http.routers.passbolt-https.tls.certresolver: "letsEncrypt-production"
    environment:
      # The following are required. Specify your own values in the .env file included.
      # make sure APP_FULL_BASE_URL is resolvable to the passbolt server
      APP_FULL_BASE_URL: "$APP_FULL_BASE_URL"
      DATASOURCES_DEFAULT_HOST: "db"
      DATASOURCES_DEFAULT_USERNAME: "$PASSBOLT_DB_USERNAME"
      DATASOURCES_DEFAULT_PASSWORD: "$PASSBOLT_DB_PASSWORD"
      DATASOURCES_DEFAULT_DATABASE: "$PASSBOLT_DB_NAME"
      EMAIL_TRANSPORT_DEFAULT_HOST: "$EMAIL_TRANSPORT_DEFAULT_HOST"
      EMAIL_TRANSPORT_DEFAULT_PORT: "$EMAIL_TRANSPORT_DEFAULT_PORT"
      EMAIL_TRANSPORT_DEFAULT_USERNAME: $EMAIL_TRANSPORT_DEFAULT_USERNAME"
      # If using google then it must be an applicaiton specific password (Google -> Manage account -> Security > App passwords)
      EMAIL_TRANSPORT_DEFAULT_PASSWORD: "$EMAIL_TRANSPORT_DEFAULT_PASSWORD"
      EMAIL_TRANSPORT_DEFAULT_TLS: "$EMAIL_TRANSPORT_DEFAULT_TLS"
      EMAIL_DEFAULT_FROM: "$EMAIL_DEFAULT_FROM"
    volumes:
      - gpg_volume:/etc/passbolt/gpg
      - jwt_volume:/etc/passbolt/jwt
    command: ["/usr/bin/wait-for.sh", "-t", "0", "db:3306", "--", "/docker-entrypoint.sh"]
    networks:
      - services
    deploy:
      resources:
        limits:
          memory: 512M
  # Jenkins Master  
  jenkins:
    image: devopsjourney1/myjenkins-blueocean:2.375.3-1
    hostname: jenkins
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.docker.network: "traefik"
      traefik.http.services.jenkins.loadbalancer.server.port: "8080"
      traefik.http.routers.jenkins-http.entrypoints: "web"
      traefik.http.routers.jenkins-http.rule: "Host(`jenkins.devopsbrad.com`)"
      traefik.http.routers.jenkins-https.entrypoints: "websecure"
      traefik.http.routers.jenkins-https.rule: "Host(`jenkins.devopsbrad.com`)"
      traefik.http.routers.jenkins-https.tls: "true"
      traefik.http.routers.jenkins-https.tls.certresolver: "letsEncrypt-production"
    volumes:
    - jenkins-data:/var/jenkins_home
    - jenkins-docker-certs:/certs/client:ro
    environment:
      DOCKER_HOST: tcp://docker:2376
      DOCKER_CERT_PATH: /certs/client
      DOCKER_TLS_VERIFY: "1"
    networks:
      - services
    deploy:
      resources:
        limits:
          memory: 1024M
  prometheus:
    image: prom/prometheus:v2.24.0
    hostname: prometheus
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.services.prometheus.loadbalancer.server.port: "9090"
      traefik.http.routers.prometheus-http.entrypoints: "web"
      traefik.http.routers.prometheus-http.rule: "Host(`prom.devopsbrad.com`)"
      traefik.http.routers.prometheus-https.entrypoints: "websecure"
      traefik.http.routers.prometheus-https.rule: "Host(`prom.devopsbrad.com`)"
      traefik.http.routers.prometheus-https.tls: "true"
      traefik.http.routers.prometheus-https.tls.certresolver: "letsEncrypt-production"
    volumes:
      - prometheus-storage:/prometheus
    networks:
      - services
    deploy:
      resources:
        limits:
          memory: 64M
  grafana:
    image: grafana/grafana:7.3.0
    hostname: grafana
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.services.grafana.loadbalancer.server.port: "3000"
      traefik.http.routers.grafana-http.entrypoints: "web"
      traefik.http.routers.grafana-http.rule: "Host(`grafana.devopsbrad.com`)"
      traefik.http.routers.grafana-https.entrypoints: "websecure"
      traefik.http.routers.grafana-https.rule: "Host(`grafana.devopsbrad.com`)"
      traefik.http.routers.grafana-https.tls: "true"
      traefik.http.routers.grafana-https.tls.certresolver: "letsEncrypt-production"
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=$GF_SECURITY_ADMIN_USER
      - GF_SECURITY_ADMIN_PASSWORD=$GF_SECURITY_ADMIN_PASSWORD
    networks:
      - services
    deploy:
      resources:
        limits:
          memory: 64M
  cloudflare-tunnel:
    image: cloudflare/cloudflared:latest
    hostname: cloudflared
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token $CLOUDFLARE_TUNNEL_TOKEN
    networks:
      - services
    deploy:
      resources:
        limits:
          memory: 48M
  # Teleport Proxy)
  teleport:
    image: public.ecr.aws/gravitational/teleport-lab:12
    hostname: tele.devopsbrad.com
    restart: unless-stopped
    labels:
      traefik.enable: "true"
      traefik.http.services.teleport.loadbalancer.server.port: "443"
      traefik.http.routers.teleport-http.entrypoints: "web"
      traefik.http.routers.teleport-http.rule: "Host(`tele.devopsbrad.com`)"
      traefik.http.routers.teleport-https.entrypoints: "websecure"
      traefik.http.routers.teleport-https.rule: "Host(`tele.devopsbrad.com`)"
      traefik.http.routers.teleport-https.tls: "true"
      traefik.http.routers.teleport-https.tls.certresolver: "letsEncrypt-production"
    container_name: teleport
    entrypoint: /bin/sh
    command: -c "/usr/bin/dumb-init teleport start -d -c /etc/teleport.d/teleport.yaml"
    ports:
      - "3023:3023"
      - "3024:3024"
      - "3025:3025"
      - "8443:443"
    volumes:
      - tele-config:/etc/teleport.d
      - tele-data:/var/lib/teleport
      - tele-certs:/mnt/shared/certs
    networks:
      services:
        aliases:
          - proxy.tele.devopsbrad.com
  # BootStrap Teleport Certs
  bootstrap:
    image: public.ecr.aws/gravitational/teleport-lab:12
    container_name: teleport-bootstrap
    entrypoint: /bin/sh
    command: -c "/etc/teleport.d/scripts/generate-certs.sh"
    volumes:
      - tele-config:/etc/teleport
      - tele-data:/var/lib/teleport
      - tele-certs:/mnt/shared/certs
    depends_on:
      - teleport
    networks:
      - services

# Docker Volumes
volumes:
  pihole-config:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '$VOLUME_PATH/pihole/config'
  pihole-dns:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '$VOLUME_PATH/pihole/dns'
  jenkins-data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '$VOLUME_PATH/jenkins/data'
  jenkins-docker-certs:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '$VOLUME_PATH/jenkins/certs'
  grafana-storage:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '$VOLUME_PATH/grafana'
  prometheus-storage:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '$VOLUME_PATH/prometheus'
  portainer_data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '$VOLUME_PATH/portainer'
  # Passbolt Volumes
  passbolt_database_volume:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '$VOLUME_PATH/passbolt/db'
  gpg_volume:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '$VOLUME_PATH/passbolt/gpg'
  jwt_volume:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '$VOLUME_PATH/passbolt/jwt'
  # Teleport Volumes
  tele-config:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '$VOLUME_PATH/teleport/config'
  tele-data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '$VOLUME_PATH/teleport/data'
  tele-certs:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '$VOLUME_PATH/teleport/certs'

# Docker Networks
networks:
  services:
  home:
    driver: macvlan
    driver_opts:
      parent: $PARENT_INTERFACE
    ipam:
      config:
        - subnet: $SUBNET
          gateway: $GATEWAY
          ip_range: $IP_RANGE
